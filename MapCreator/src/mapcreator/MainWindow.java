package mapcreator;

import java.awt.Color;
import java.awt.Graphics;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import Entities2.Item;
import Entities2.Box;
import Entities2.Cell;
import Entities2.ItemContainer;
import Entities2.NPC;
import Entities2.Person;
import com.mud.Entities.GameWorld;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.HashMap;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
/**
 * @author Tomek
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        paint(this.getGraphics());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlSide = new javax.swing.JTabbedPane();
        pnlMap = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtMapName = new javax.swing.JTextField();
        btnSaveToFile = new javax.swing.JButton();
        txtFileName = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        btnNewMap = new javax.swing.JButton();
        lblMapNumRooms = new javax.swing.JLabel();
        lblMapNumEnemies = new javax.swing.JLabel();
        lblMapNumContainers = new javax.swing.JLabel();
        lblMapNumItems = new javax.swing.JLabel();
        pnlContainer = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        txtContainerName = new javax.swing.JTextField();
        btnSaveContainer = new javax.swing.JButton();
        btnEditContainer = new javax.swing.JButton();
        btnRemoveContainer = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        lstContainer = new javax.swing.JList();
        lblNumContainer = new javax.swing.JLabel();
        btnAddContainer = new javax.swing.JButton();
        pnlItem = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txtItemName = new javax.swing.JTextField();
        btnSaveItem = new javax.swing.JButton();
        btnEditItem = new javax.swing.JButton();
        btnRemoveItem = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstItem = new javax.swing.JList();
        lblNumItems = new javax.swing.JLabel();
        btnAddItem = new javax.swing.JButton();
        cobItemParent = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        pnlEnemy = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstEnemy = new javax.swing.JList();
        btnEditEnemy = new javax.swing.JButton();
        btnRemoveEnemy = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtEnemyName = new javax.swing.JTextField();
        btnSaveEnemy = new javax.swing.JButton();
        lblNumEnemies = new javax.swing.JLabel();
        btnAddEnemy = new javax.swing.JButton();
        jSpinnerHealth = new javax.swing.JSpinner();
        jSpinnerAttack = new javax.swing.JSpinner();
        jSpinnerDefence = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        pnlRooms = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstRooms = new javax.swing.JList();
        btnEditRoom = new javax.swing.JButton();
        btnRemoveRoom = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtRoomName = new javax.swing.JTextField();
        btnSaveRoom = new javax.swing.JButton();
        btnN = new javax.swing.JButton();
        btnE = new javax.swing.JButton();
        btnW = new javax.swing.JButton();
        btnS = new javax.swing.JButton();
        lblNumRooms = new javax.swing.JLabel();
        panel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlSide.setEnabled(false);

        jLabel1.setText("Nazwa mapy:");

        btnSaveToFile.setText("Zapisz");
        btnSaveToFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveToFileActionPerformed(evt);
            }
        });

        txtFileName.setText("map.mm");

        jLabel6.setText("Nazwa pliku:");

        jButton6.setText("Wczytaj");

        btnNewMap.setText("Nowa Mapa");
        btnNewMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewMapActionPerformed(evt);
            }
        });

        lblMapNumRooms.setText("jLabel10");

        lblMapNumEnemies.setText("jLabel11");

        lblMapNumContainers.setText("jLabel12");

        lblMapNumItems.setText("jLabel13");

        javax.swing.GroupLayout pnlMapLayout = new javax.swing.GroupLayout(pnlMap);
        pnlMap.setLayout(pnlMapLayout);
        pnlMapLayout.setHorizontalGroup(
            pnlMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMapLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtMapName)
                    .addGroup(pnlMapLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtFileName))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMapLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnNewMap))
                    .addGroup(pnlMapLayout.createSequentialGroup()
                        .addGroup(pnlMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(pnlMapLayout.createSequentialGroup()
                                .addComponent(btnSaveToFile, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblMapNumRooms)
                            .addComponent(lblMapNumEnemies)
                            .addComponent(lblMapNumContainers)
                            .addComponent(lblMapNumItems))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlMapLayout.setVerticalGroup(
            pnlMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMapLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtMapName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnNewMap)
                .addGap(8, 8, 8)
                .addComponent(lblMapNumRooms)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMapNumEnemies)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMapNumContainers)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMapNumItems)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 190, Short.MAX_VALUE)
                .addGroup(pnlMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(8, 8, 8)
                .addGroup(pnlMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSaveToFile)
                    .addComponent(jButton6))
                .addGap(8, 8, 8))
        );

        pnlSide.addTab("Mapa", pnlMap);

        pnlContainer.setBackground(new java.awt.Color(255, 153, 255));

        jLabel5.setText("Nazwa Skrzyni:");

        btnSaveContainer.setText("Zapisz");
        btnSaveContainer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveContainerActionPerformed(evt);
            }
        });

        btnEditContainer.setText("Edytuj");

        btnRemoveContainer.setText("Usu≈Ñ");
        btnRemoveContainer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveContainerActionPerformed(evt);
            }
        });

        lstContainer.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane4.setViewportView(lstContainer);

        lblNumContainer.setText("jLabel10");

        btnAddContainer.setText("Dodaj");
        btnAddContainer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddContainerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlContainerLayout = new javax.swing.GroupLayout(pnlContainer);
        pnlContainer.setLayout(pnlContainerLayout);
        pnlContainerLayout.setHorizontalGroup(
            pnlContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlContainerLayout.createSequentialGroup()
                        .addGap(0, 106, Short.MAX_VALUE)
                        .addComponent(btnAddContainer))
                    .addGroup(pnlContainerLayout.createSequentialGroup()
                        .addComponent(lblNumContainer)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(pnlContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlContainerLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(pnlContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                        .addGroup(pnlContainerLayout.createSequentialGroup()
                            .addComponent(btnEditContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnRemoveContainer, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE))
                        .addGroup(pnlContainerLayout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtContainerName))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlContainerLayout.createSequentialGroup()
                            .addGap(0, 0, Short.MAX_VALUE)
                            .addComponent(btnSaveContainer)))
                    .addContainerGap()))
        );
        pnlContainerLayout.setVerticalGroup(
            pnlContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlContainerLayout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(btnAddContainer)
                .addGap(87, 87, 87)
                .addComponent(lblNumContainer)
                .addContainerGap(234, Short.MAX_VALUE))
            .addGroup(pnlContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlContainerLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(pnlContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(txtContainerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(134, 134, 134)
                    .addComponent(btnSaveContainer)
                    .addGap(0, 0, 0)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(pnlContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnEditContainer)
                        .addComponent(btnRemoveContainer))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pnlSide.addTab("Skrzynie", pnlContainer);

        pnlItem.setBackground(new java.awt.Color(204, 255, 255));

        jLabel4.setText("Nazwa:");

        btnSaveItem.setText("Zapisz");

        btnEditItem.setText("Edytuj");

        btnRemoveItem.setText("Usu≈Ñ");
        btnRemoveItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveItemActionPerformed(evt);
            }
        });

        lstItem.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(lstItem);

        lblNumItems.setText("jLabel10");

        btnAddItem.setText("Dodaj");
        btnAddItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddItemActionPerformed(evt);
            }
        });

        cobItemParent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cobItemParentActionPerformed(evt);
            }
        });

        jLabel8.setText("Rodzic:");

        javax.swing.GroupLayout pnlItemLayout = new javax.swing.GroupLayout(pnlItem);
        pnlItem.setLayout(pnlItemLayout);
        pnlItemLayout.setHorizontalGroup(
            pnlItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlItemLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlItemLayout.createSequentialGroup()
                        .addComponent(lblNumItems)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAddItem))
                    .addGroup(pnlItemLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cobItemParent, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(pnlItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlItemLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(pnlItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGroup(pnlItemLayout.createSequentialGroup()
                            .addComponent(btnEditItem, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnRemoveItem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlItemLayout.createSequentialGroup()
                            .addGap(0, 0, Short.MAX_VALUE)
                            .addGroup(pnlItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlItemLayout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(btnSaveItem, javax.swing.GroupLayout.Alignment.TRAILING))))
                    .addContainerGap()))
        );
        pnlItemLayout.setVerticalGroup(
            pnlItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlItemLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(pnlItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cobItemParent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAddItem)
                .addGap(73, 73, 73)
                .addComponent(lblNumItems)
                .addContainerGap(243, Short.MAX_VALUE))
            .addGroup(pnlItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlItemLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(pnlItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(txtItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(134, 134, 134)
                    .addComponent(btnSaveItem)
                    .addGap(0, 0, 0)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(pnlItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnEditItem)
                        .addComponent(btnRemoveItem))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pnlSide.addTab("Przedmioty", pnlItem);

        pnlEnemy.setBackground(new java.awt.Color(255, 231, 122));

        lstEnemy.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(lstEnemy);

        btnEditEnemy.setText("Edytuj");

        btnRemoveEnemy.setText("Usu≈Ñ");
        btnRemoveEnemy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveEnemyActionPerformed(evt);
            }
        });

        jLabel3.setText("Nazwa:");

        btnSaveEnemy.setText("Zapisz");

        lblNumEnemies.setText("jLabel10");

        btnAddEnemy.setText("Dodaj");
        btnAddEnemy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddEnemyActionPerformed(evt);
            }
        });

        jLabel7.setText("Wytrzyma≈Ço≈õƒá:");

        jLabel10.setText("Atak:");

        jLabel11.setText("Obrona:");

        javax.swing.GroupLayout pnlEnemyLayout = new javax.swing.GroupLayout(pnlEnemy);
        pnlEnemy.setLayout(pnlEnemyLayout);
        pnlEnemyLayout.setHorizontalGroup(
            pnlEnemyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEnemyLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAddEnemy)
                .addContainerGap())
            .addGroup(pnlEnemyLayout.createSequentialGroup()
                .addGroup(pnlEnemyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlEnemyLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnlEnemyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblNumEnemies)
                            .addGroup(pnlEnemyLayout.createSequentialGroup()
                                .addGroup(pnlEnemyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel7))
                                .addGap(18, 18, 18)
                                .addGroup(pnlEnemyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jSpinnerHealth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jSpinnerAttack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(pnlEnemyLayout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jLabel11)
                        .addGap(18, 18, 18)
                        .addComponent(jSpinnerDefence, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pnlEnemyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlEnemyLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(pnlEnemyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                        .addGroup(pnlEnemyLayout.createSequentialGroup()
                            .addComponent(btnEditEnemy, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnRemoveEnemy, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE))
                        .addGroup(pnlEnemyLayout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtEnemyName))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEnemyLayout.createSequentialGroup()
                            .addGap(0, 0, Short.MAX_VALUE)
                            .addComponent(btnSaveEnemy)))
                    .addContainerGap()))
        );
        pnlEnemyLayout.setVerticalGroup(
            pnlEnemyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEnemyLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(pnlEnemyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerHealth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEnemyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerAttack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEnemyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerDefence, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAddEnemy)
                .addGap(18, 18, 18)
                .addComponent(lblNumEnemies)
                .addContainerGap(247, Short.MAX_VALUE))
            .addGroup(pnlEnemyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlEnemyLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(pnlEnemyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(txtEnemyName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(134, 134, 134)
                    .addComponent(btnSaveEnemy)
                    .addGap(0, 0, 0)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(pnlEnemyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnEditEnemy)
                        .addComponent(btnRemoveEnemy))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pnlSide.addTab("Wrogowie", pnlEnemy);

        jScrollPane1.setViewportView(lstRooms);

        btnEditRoom.setText("Edytuj");
        btnEditRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditRoomActionPerformed(evt);
            }
        });

        btnRemoveRoom.setText("Usu≈Ñ");
        btnRemoveRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveRoomActionPerformed(evt);
            }
        });

        jLabel2.setText("Nazwa pokoju:");

        btnSaveRoom.setText("Zapisz");
        btnSaveRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveRoomActionPerformed(evt);
            }
        });

        btnN.setText("N");
        btnN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNActionPerformed(evt);
            }
        });

        btnE.setText("E");
        btnE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEActionPerformed(evt);
            }
        });

        btnW.setText("W");
        btnW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWActionPerformed(evt);
            }
        });

        btnS.setText("S");
        btnS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSActionPerformed(evt);
            }
        });

        lblNumRooms.setText("jLabel10");

        javax.swing.GroupLayout pnlRoomsLayout = new javax.swing.GroupLayout(pnlRooms);
        pnlRooms.setLayout(pnlRoomsLayout);
        pnlRoomsLayout.setHorizontalGroup(
            pnlRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRoomsLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(btnW)
                .addGap(0, 0, 0)
                .addGroup(pnlRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnS)
                    .addComponent(btnN))
                .addGap(0, 0, 0)
                .addComponent(btnE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pnlRoomsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                    .addGroup(pnlRoomsLayout.createSequentialGroup()
                        .addComponent(btnEditRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnRemoveRoom, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE))
                    .addGroup(pnlRoomsLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtRoomName))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlRoomsLayout.createSequentialGroup()
                        .addComponent(lblNumRooms)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSaveRoom)))
                .addContainerGap())
        );
        pnlRoomsLayout.setVerticalGroup(
            pnlRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlRoomsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtRoomName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlRoomsLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(pnlRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnE)
                            .addComponent(btnW)))
                    .addGroup(pnlRoomsLayout.createSequentialGroup()
                        .addComponent(btnN)
                        .addGap(18, 18, 18)
                        .addComponent(btnS)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                .addGroup(pnlRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSaveRoom, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlRoomsLayout.createSequentialGroup()
                        .addComponent(lblNumRooms)
                        .addGap(18, 18, 18)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditRoom)
                    .addComponent(btnRemoveRoom))
                .addContainerGap())
        );

        pnlSide.addTab("Pokoje", pnlRooms);

        panel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 660, Short.MAX_VALUE)
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlSide, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlSide))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNewMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewMapActionPerformed
        rooms = new ArrayList<>();
        enemies = new ArrayList<>();
        items = new ArrayList<>();
        containers = new ArrayList<>();
        map = new Map();
        map.setName(this.txtMapName.getText());
        Cell firstRoom = new Cell();
        firstRoom.setId(idRoom++);
        firstRoom.setName("START");
        firstRoom.setCordX(15);
        firstRoom.setCordY(20);
        map.addRoom(firstRoom);
        rooms.add(firstRoom);
        inxRoom=firstRoom.getId();
        activeCell = firstRoom;
        updateRoomsList();
        updateEnemiesList();
        updateContainers();
        updateItemsList();

        pnlSide.setEnabled(true);
        repaint();
    }//GEN-LAST:event_btnNewMapActionPerformed

    private void btnRemoveRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveRoomActionPerformed
        int index = -1;
        index = lstRooms.getSelectedIndex();
        if (index >= 0) {
            Cell removeRoom = rooms.get(index);
            rooms.remove(removeRoom);
            map.removeRoom(removeRoom);
        }
        inxRoom = Integer.MIN_VALUE;
        repaint();
        updateRoomsList();
    }//GEN-LAST:event_btnRemoveRoomActionPerformed

    private void btnEditRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditRoomActionPerformed
        inxRoom = lstRooms.getSelectedIndex();
        if (inxRoom >= 0) {
            Cell editRoom = rooms.get(inxRoom);
            txtRoomName.setText(editRoom.getName());
            activeCell = editRoom;
        }
        repaint();
        updateRoomsList();
    }//GEN-LAST:event_btnEditRoomActionPerformed

    private void btnNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNActionPerformed
        if (inxRoom >= 0) {
            Cell baseRoom = rooms.get(inxRoom);

            if (baseRoom.getCordX() > 0) {
                if (!map.isEmpty(baseRoom.getCordX() - 1, baseRoom.getCordY())) {
                    inxRoom = getIndexOfRoomFromCord(baseRoom.getCordX() - 1, baseRoom.getCordY());
                    activeCell = rooms.get(inxRoom);
                } else {
                    Cell newRoom = new Cell();
                    newRoom.setId(idRoom++);
                    newRoom.setName(txtRoomName.getText());
                    newRoom.setCordX(baseRoom.getCordX() - 1);
                    newRoom.setCordY(baseRoom.getCordY());
                    
                    updateNeighbours(newRoom);
                    map.addRoom(newRoom);
                    rooms.add(newRoom);
                    activeCell = newRoom;
                    inxRoom = rooms.size() - 1;
                }
            }
        }
        repaint();
        updateRoomsList();
        updateItemsList();
        updateContainers();
        updateEnemiesList();
    }//GEN-LAST:event_btnNActionPerformed

    private void btnSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSActionPerformed
        if (inxRoom >= 0) {
            Cell baseRoom = rooms.get(inxRoom);
            if (baseRoom.getCordX() < 30) {
                if (!map.isEmpty(baseRoom.getCordX() + 1, baseRoom.getCordY())) {
                    inxRoom = getIndexOfRoomFromCord(baseRoom.getCordX() + 1, baseRoom.getCordY());
                    activeCell = rooms.get(inxRoom);
                } else {
                    Cell newRoom = new Cell();
                    newRoom.setId(idRoom++);
                    newRoom.setName(txtRoomName.getText());
                    newRoom.setCordX(baseRoom.getCordX() + 1);
                    newRoom.setCordY(baseRoom.getCordY());
                    
                    updateNeighbours(newRoom);
                    map.addRoom(newRoom);
                    rooms.add(newRoom);
                    activeCell = newRoom;
                    inxRoom = rooms.size() - 1;
                }
            }
        }
        repaint();
        updateRoomsList();
        updateItemsList();
        updateContainers();
        updateEnemiesList();
    }//GEN-LAST:event_btnSActionPerformed

    private void btnWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWActionPerformed
        if (inxRoom >= 0) {
            Cell baseRoom = rooms.get(inxRoom);
            if (baseRoom.getCordY() > 0) {
                if (!map.isEmpty(baseRoom.getCordX(), baseRoom.getCordY() - 1)) {
                    inxRoom = getIndexOfRoomFromCord(baseRoom.getCordX(), baseRoom.getCordY() - 1);
                    activeCell = rooms.get(inxRoom);
                } else {
                    Cell newRoom = new Cell();
                    newRoom.setId(idRoom++);
                    newRoom.setName(txtRoomName.getText());
                    newRoom.setCordX(baseRoom.getCordX());
                    newRoom.setCordY(baseRoom.getCordY() - 1);
                    
                    updateNeighbours(newRoom);
                    map.addRoom(newRoom);
                    rooms.add(newRoom);
                    activeCell = newRoom;
                    inxRoom = rooms.size() - 1;
                }
            }
        }
        repaint();
        updateRoomsList();
        updateItemsList();
        updateContainers();
        updateEnemiesList();
    }//GEN-LAST:event_btnWActionPerformed

    private void btnSaveRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveRoomActionPerformed
        if (inxRoom >= 0) {
            Cell saveRoom = rooms.get(inxRoom);
            if (saveRoom != null) {
                saveRoom.setName(txtRoomName.getText());
            }
        }
        updateRoomsList();
        updateItemsList();
        updateContainerList();
        updateEnemiesList();
    }//GEN-LAST:event_btnSaveRoomActionPerformed

    private void btnEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEActionPerformed
        if (inxRoom >= 0) {
            Cell baseRoom = rooms.get(inxRoom);
            if (baseRoom.getCordY() < 40) {
                if (!map.isEmpty(baseRoom.getCordX(), baseRoom.getCordY() + 1)) {
                    inxRoom = getIndexOfRoomFromCord(baseRoom.getCordX(), baseRoom.getCordY() + 1);
                    activeCell = rooms.get(inxRoom);
                } else {
                    Cell newRoom = new Cell();
                    newRoom.setId(idRoom++);
                    newRoom.setName(txtRoomName.getText());
                    newRoom.setCordX(baseRoom.getCordX());
                    newRoom.setCordY(baseRoom.getCordY() + 1);
                    
                    updateNeighbours(newRoom);
                    map.addRoom(newRoom);
                    rooms.add(newRoom);
                    activeCell = newRoom;
                    inxRoom = rooms.size() - 1;
                }
            }
            repaint();
            updateRoomsList();
            updateItemsList();
            updateContainers();
            updateEnemiesList();
        }

    }//GEN-LAST:event_btnEActionPerformed

    private void btnSaveContainerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveContainerActionPerformed
       
    }//GEN-LAST:event_btnSaveContainerActionPerformed

    private void btnAddContainerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddContainerActionPerformed
       //int indRoom=cobContainerParent.getSelectedIndex();
       Box newContainer=new Box();
       newContainer.setName(txtContainerName.getText());
       newContainer.setId(idContainer++);
       //newContainer.setColor(Color.ORANGE);
       containers.add(newContainer);
       activeCell.addBox(newContainer);
       
       updateContainerList();
       repaint();
    }//GEN-LAST:event_btnAddContainerActionPerformed

    private void btnAddEnemyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddEnemyActionPerformed
       // int indRoom=cobEnemyParent.getSelectedIndex();
       NPC newEnemy=new NPC();
       newEnemy.setName(txtEnemyName.getText());
       newEnemy.setId(idEnemy++);
       newEnemy.setHealth((Integer)jSpinnerHealth.getValue());
       newEnemy.setAttack((Integer)jSpinnerAttack.getValue());
       newEnemy.setDefence((Integer)jSpinnerDefence.getValue());
       
       enemies.add(newEnemy);
       activeCell.addPerson(newEnemy);
       containers.add(newEnemy);
       
       updateEnemiesList();
       repaint();
    }//GEN-LAST:event_btnAddEnemyActionPerformed

    private void btnAddItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddItemActionPerformed
         //int index=activeCell.getSelectedIndex();
         
       Item newItem=new Item();
       newItem.setName(txtItemName.getText());
       newItem.setId(idItem++);
       //newItem.setColor(Color.BLUE);
       items.add(newItem);
       
       
       //if (index>=rooms.size()){
       //      index-=rooms.size();
       //      containers.get(index).getItems().add(newItem);
       //}else{
       //    rooms.get(index).PutItem(newItem);
       //}
       activeCell.PutItem(newItem);
       updateItemsList();
       repaint();
    }//GEN-LAST:event_btnAddItemActionPerformed

    private void btnRemoveItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveItemActionPerformed
        int index = lstItem.getSelectedIndex();//nie wiem jak to dzia≈Ça
        if (index >= 0) {
            Item toDel = items.get(index);
            activeCell.items.remove(toDel);
            items.remove(toDel);
        }
        repaint();
        updateItemsList();
    }//GEN-LAST:event_btnRemoveItemActionPerformed

    private void btnRemoveEnemyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveEnemyActionPerformed
        int index = lstEnemy.getSelectedIndex();
        if (index >= 0) {
            Person toDel = enemies.get(index);
            activeCell.people.remove(toDel);
            enemies.remove(toDel);
        }
        repaint();
        updateEnemiesList();
    }//GEN-LAST:event_btnRemoveEnemyActionPerformed

    private void cobItemParentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cobItemParentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cobItemParentActionPerformed

    private void btnRemoveContainerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveContainerActionPerformed
        int index = lstContainer.getSelectedIndex();
        if (index > 0) {
            ItemContainer toDel = containers.get(index);
            if (toDel.getClass().equals(Person.class)) {
                activeCell.people.remove(toDel);
            } else if (toDel.getClass().equals(Box.class)){
                            activeCell.getBoxes().remove(toDel);
            }
            containers.remove(toDel);
        } else System.out.println("Nie mo≈ºesz usunƒÖƒá pokoju");
        repaint();
        updateContainerList();
    }//GEN-LAST:event_btnRemoveContainerActionPerformed

    private void panelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelMouseClicked
        //System.out.println("eloelo" + evt.getY() + " " + evt.getX());
        if (map !=null) {
            if (!map.isEmpty(evt.getY() / 16, evt.getX() / 16)) {
                inxRoom = getIndexOfRoomFromCord(evt.getY() / 16, evt.getX() / 16);
                activeCell = rooms.get(inxRoom);
            } else {
                Cell newRoom = new Cell();
                newRoom.setId(idRoom++);
                newRoom.setName(txtRoomName.getText());
                newRoom.setCordX(evt.getY() / 16);
                newRoom.setCordY(evt.getX() / 16);
                updateNeighbours(newRoom);
                map.addRoom(newRoom);
                rooms.add(newRoom);
                activeCell = newRoom;
                inxRoom = rooms.size() - 1;
            }
            repaint();
            updateRoomsList();
            updateItemsList();
            updateContainers();
            updateEnemiesList();
        }

    }//GEN-LAST:event_panelMouseClicked

    private void btnSaveToFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveToFileActionPerformed
        JFrame parentFrame = new JFrame();

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Wybierz gdzie zapisaƒá");
        //fileChooser.setName("twojastara");
        fileChooser.setSelectedFile(new File(txtFileName.getText()));
        //fileChooser.getUI().setFileName( name )

        int userSelection = fileChooser.showSaveDialog(parentFrame);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            System.out.println("Save as file: " + fileToSave.getAbsolutePath());
            FileOutputStream fos = null;
            ObjectOutputStream oos = null;
            try {
                fos = new FileOutputStream(fileToSave); //utworzenie strumienia wyj≈õciowego
                oos = new ObjectOutputStream(fos);  //utworzenie obiektu zapisujƒÖcego do strumienia

                oos.writeObject(toGameWorld()); //serializacja obiektu
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                // zamykamy strumienie w finally
                try {
                    if (oos != null) {
                        oos.close();
                    }
                } catch (IOException e) {
                }
                try {
                    if (fos != null) {
                        fos.close();
                    }
                } catch (IOException e) {
                }
            }
        }
    }//GEN-LAST:event_btnSaveToFileActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    public void updateRoomsList() {
        DefaultListModel model = new DefaultListModel();
        lstRooms.setModel(model);
        this.lblNumRooms.setText("Liczba pokoi: " + rooms.size());
        this.lblMapNumRooms.setText("Liczba pokoi: " + rooms.size());
        for (int i = 0; i < rooms.size(); i++) {
            String s = Integer.toString(i)+"#" + rooms.get(i).getLine();
            model.addElement(s);
        }
        updateParentItemCombo();
        //updateParentEnemyCombo();
        //updateParentItemCombo();
    }
    public void updateParentItemCombo(){
        cobItemParent.removeAllItems();
        for(int i=0;i<containers.size();i++){
            cobItemParent.addItem(containers.get(i).getLine());
        }
    }
    //public void updateParentEnemyCombo(){
    //    cobEnemyParent.removeAllItems();
    //    for(int i=0;i<rooms.size();i++){
    //        cobEnemyParent.addItem(rooms.get(i).getLine());
    //    }
    //}
    //public void updateParentItemCombo(){
    //    cobItemParent.removeAllItems();
    //    for(int i=0;i<rooms.size();i++){
    //        cobItemParent.addItem(rooms.get(i).getLine());
    //    }
    //    for(int i=0;i<containers.size();i++){
    //        cobItemParent.addItem(containers.get(i).getLine());
    //    }
        
    //}

    public void updateEnemiesList() {
        DefaultListModel model = new DefaultListModel();
        lstEnemy.setModel(model);
        this.lblNumEnemies.setText("Liczba Os√≥b: " + activeCell.getPeople().size());
        this.lblMapNumItems.setText("Liczba Os√≥b: " + activeCell.getPeople().size());
        for (int i = 0; i < activeCell.getPeople().size(); i++) {
            String s = Integer.toString(i)+"#" + activeCell.getPeople().get(i).getLine();
            model.addElement(s);
        }
    }

    public void updateContainerList() {
        DefaultListModel model = new DefaultListModel();
        lstContainer.setModel(model);
        this.lblNumContainer.setText("Liczba kontener√≥w: " + containers.size());
        this.lblMapNumContainers.setText("Liczba kontener√≥w: " + containers.size());
        for (int i = 0; i < containers.size(); i++) {
            String s = Integer.toString(i)+"#" + containers.get(i).getLine();
            model.addElement(s);
        }
        updateParentItemCombo();
    }
    
    public void updateContainers() {
        containers.clear();
        containers.add(activeCell);
        containers.addAll(activeCell.getBoxes());
        containers.addAll(activeCell.getPeople());
        updateContainerList();
    }

    public void updateItemsList() {
        DefaultListModel model = new DefaultListModel();
        lstItem.setModel(model);
        this.lblNumItems.setText("Liczba Przedmiot√≥w: " + activeCell.getItems().size());
        this.lblMapNumItems.setText("Liczba Przedmiot√≥w: " + activeCell.getItems().size());
        for (int i = 0; i < activeCell.getItems().size(); i++) {
            String s = Integer.toString(i)+"#" + activeCell.getItems().get(i).getLine();
            model.addElement(s);
        }
    }

    public int getIndexOfRoom(Cell roomToFind) {
        for (int i = 0; i < rooms.size(); i++) {
            if (roomToFind == rooms.get(i)) {
                return i;
            }
        }
        return -1;
    }

    public int getIndexOfRoomFromCord(int x, int y) {
        for (int i = 0; i < rooms.size(); i++) {
            if (x == rooms.get(i).getCordX() && y == rooms.get(i).getCordY()) {
                return i;
            }
        }
        return -1;
    }
    public Cell getRoomFromCord(int x, int y) {
        for (int i = 0; i < rooms.size(); i++) {
            if (x == rooms.get(i).getCordX() && y == rooms.get(i).getCordY()) {
                return rooms.get(i);
            }
        }
        return null;
    }
    public void updateNeighbours(Cell newCell){
        if (!map.isEmpty(newCell.getCordX()-1, newCell.getCordY())){
            Cell northCell = getRoomFromCord(newCell.getCordX()-1, newCell.getCordY());
            newCell.cellNorth = northCell;
            northCell.cellSouth = newCell;
        } else newCell.cellNorth=null;
        if (!map.isEmpty(newCell.getCordX()+1, newCell.getCordY())){
            Cell southCell = getRoomFromCord(newCell.getCordX()+1, newCell.getCordY());
            newCell.cellSouth = southCell;
            southCell.cellNorth = newCell;
        } else newCell.cellSouth=null;
        if (!map.isEmpty(newCell.getCordX(), newCell.getCordY()+1)){
            Cell eastCell = getRoomFromCord(newCell.getCordX(), newCell.getCordY()+1);
            newCell.cellEast = eastCell;
            eastCell.cellWest = newCell;
        } else newCell.cellEast=null;
        if (!map.isEmpty(newCell.getCordX(), newCell.getCordY()-1)){
            Cell westCell = getRoomFromCord(newCell.getCordX(), newCell.getCordY()-1);
            newCell.cellWest = westCell;
            westCell.cellEast = newCell;
        } else newCell.cellWest=null;
    }
    public GameWorld toGameWorld(){
        System.out.println(rooms.size());
        HashMap<Cell, com.mud.Entities.Cell> map = new HashMap<Cell, com.mud.Entities.Cell>();
        for (Cell cell : rooms){
            if (!map.containsKey(cell)){
                com.mud.Entities.Cell newCell = new com.mud.Entities.Cell();
                newCell.Name=cell.getName();
                for (Person person : cell.getPeople()){
                    com.mud.Entities.Person newPerson = new com.mud.Entities.NonPlayerCharacter();
                    newPerson.setLocation(newCell);
                    newPerson.setAttack(person.getAttack());
                    newPerson.setDefence(person.getDefence());
                    newPerson.setHealth(person.getHealth());
                    newCell.AddPerson(newPerson);
                    for (Item item : person.equipment){
                        com.mud.Entities.Item newItem = new com.mud.Entities.Item();
                        newItem.Name = item.getName();
                        newPerson.PutItem(newItem);
                    }
                }
                for (Item item : cell.getItems()){
                    com.mud.Entities.Item newItem = new com.mud.Entities.Item();
                    newItem.Name = item.getName();
                    newCell.PutItem(newItem);
                }
                map.put(cell, newCell);
            }
        }
        for (Cell cell : rooms){
            com.mud.Entities.Cell newCell = map.get(cell);
            newCell.cellEast = map.get(cell.cellEast);
            newCell.cellWest = map.get(cell.cellWest);
            newCell.cellNorth = map.get(cell.cellNorth);
            newCell.cellSouth = map.get(cell.cellSouth);
        }
        GameWorld swiat = new GameWorld();
        swiat.setStartingCell(map.get(rooms.get(0)));
        return swiat;
    }

    public void paint(Graphics arg0) {
        super.paint(arg0);
        int recSize = 16;
        int start = 20;
        //rysowanie planszy
        for (int i = 0; i < 30; i++) {
            for (int j = 0; j < 40; j++) {
                arg0.setColor(Color.GRAY);
                arg0.fillRect(start + recSize * j, 2 * start + recSize * i, recSize - 1, recSize - 1);
                arg0.setColor(Color.black);
                arg0.drawRect(start + recSize * j, 2 * start + recSize * i, recSize - 1, recSize - 1);
            }
        }
        //rysowanie pokoi
        if (map != null) {
            int i = 0;
            while (map.getRoom(i) != null) {
                Cell room = map.getRoom(i);
                int x = room.getCordX();
                int y = room.getCordY();
                arg0.setColor(Color.DARK_GRAY);
                if (inxRoom == i) {
                    arg0.setColor(Color.RED);
                }
                arg0.fillRect(start + recSize * y, 2 * start + recSize * x, recSize - 1, recSize - 1);
                arg0.setColor(Color.DARK_GRAY);
                arg0.drawRect(start + recSize * y, 2 * start + recSize * x, recSize - 1, recSize - 1);
                if(room.getBoxes().size()>0){
                    //arg0.setColor(room.getContainers().get(0).getColor());
                    arg0.setColor(Color.MAGENTA);
                    arg0.fillRect(start + recSize * y+(int)recSize/4, 2 * start + recSize * x+(int)recSize/4, (int)recSize/4, (int)recSize/4);
                }
                if(room.getPeople().size()>0){
                    //arg0.setColor(room.getEnemies().get(0).getColor());
                    arg0.setColor(Color.ORANGE);
                    arg0.fillRect(start + recSize * y+(int)recSize/2, 2 * start + recSize * x+(int)recSize/4, (int)recSize/4, (int)recSize/4);
                }
                if(room.getItems().size()>0){
                    //arg0.setColor(room.getItems().get(0).getColor());
                    arg0.setColor(Color.CYAN);
                    arg0.fillRect(start + recSize * y+(int)recSize/4, 2 * start + recSize * x+(int)recSize/2, (int)recSize/4, (int)recSize/4);
                }
                i++;
            }
            
        }

    }
    public Map map;
    public ArrayList<Cell> rooms;
    public ArrayList<Person> enemies;
    public ArrayList<Item> items;
    public ArrayList<ItemContainer> containers;
    public Cell activeCell = null;

    public int inxRoom = -1;
    public int inxContainer = -1;
    public int inxItem = -1;
    public int inxEnemy = -1;

    public int idRoom = 0;
    public int idItem = 0;
    public int idContainer = 0;
    public int idEnemy = 0;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddContainer;
    private javax.swing.JButton btnAddEnemy;
    private javax.swing.JButton btnAddItem;
    private javax.swing.JButton btnE;
    private javax.swing.JButton btnEditContainer;
    private javax.swing.JButton btnEditEnemy;
    private javax.swing.JButton btnEditItem;
    private javax.swing.JButton btnEditRoom;
    private javax.swing.JButton btnN;
    private javax.swing.JButton btnNewMap;
    private javax.swing.JButton btnRemoveContainer;
    private javax.swing.JButton btnRemoveEnemy;
    private javax.swing.JButton btnRemoveItem;
    private javax.swing.JButton btnRemoveRoom;
    private javax.swing.JButton btnS;
    private javax.swing.JButton btnSaveContainer;
    private javax.swing.JButton btnSaveEnemy;
    private javax.swing.JButton btnSaveItem;
    private javax.swing.JButton btnSaveRoom;
    private javax.swing.JButton btnSaveToFile;
    private javax.swing.JButton btnW;
    private javax.swing.JComboBox cobItemParent;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSpinner jSpinnerAttack;
    private javax.swing.JSpinner jSpinnerDefence;
    private javax.swing.JSpinner jSpinnerHealth;
    private javax.swing.JLabel lblMapNumContainers;
    private javax.swing.JLabel lblMapNumEnemies;
    private javax.swing.JLabel lblMapNumItems;
    private javax.swing.JLabel lblMapNumRooms;
    private javax.swing.JLabel lblNumContainer;
    private javax.swing.JLabel lblNumEnemies;
    private javax.swing.JLabel lblNumItems;
    private javax.swing.JLabel lblNumRooms;
    private javax.swing.JList lstContainer;
    private javax.swing.JList lstEnemy;
    private javax.swing.JList lstItem;
    private javax.swing.JList lstRooms;
    private javax.swing.JPanel panel;
    private javax.swing.JPanel pnlContainer;
    private javax.swing.JPanel pnlEnemy;
    private javax.swing.JPanel pnlItem;
    private javax.swing.JPanel pnlMap;
    private javax.swing.JPanel pnlRooms;
    private javax.swing.JTabbedPane pnlSide;
    private javax.swing.JTextField txtContainerName;
    private javax.swing.JTextField txtEnemyName;
    private javax.swing.JTextField txtFileName;
    private javax.swing.JTextField txtItemName;
    private javax.swing.JTextField txtMapName;
    private javax.swing.JTextField txtRoomName;
    // End of variables declaration//GEN-END:variables
}
