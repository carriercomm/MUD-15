package mapcreator;

import Entities2.Cell;
import Entities2.ItemContainer;
import Entities2.NPC;
import Entities2.Person;
import com.mud.Entities.GameWorld;
import com.mud.Entities.Item;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
/**
 * @author Tomek
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        paint(this.getGraphics());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlSide = new javax.swing.JTabbedPane();
        pnlMap = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtMapName = new javax.swing.JTextField();
        btnSaveToFile = new javax.swing.JButton();
        txtFileName = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        btnNewMap = new javax.swing.JButton();
        lblMapNumRooms = new javax.swing.JLabel();
        lblMapNumEnemies = new javax.swing.JLabel();
        lblMapNumItems = new javax.swing.JLabel();
        pnlItem = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txtItemName = new javax.swing.JTextField();
        btnEditItem = new javax.swing.JButton();
        btnRemoveItem = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstItem = new javax.swing.JList();
        lblNumItems = new javax.swing.JLabel();
        btnAddItem = new javax.swing.JButton();
        cobItemParent = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jSpinnerItemAttack = new javax.swing.JSpinner();
        jSpinnerItemDefence = new javax.swing.JSpinner();
        jSpinnerItemHealth = new javax.swing.JSpinner();
        jSpinnerItemExperience = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jComboBoxItemType = new javax.swing.JComboBox();
        jSpinnerItemValue = new javax.swing.JSpinner();
        jLabel16 = new javax.swing.JLabel();
        pnlEnemy = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstEnemy = new javax.swing.JList();
        btnEditEnemy = new javax.swing.JButton();
        btnRemoveEnemy = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtEnemyName = new javax.swing.JTextField();
        lblNumEnemies = new javax.swing.JLabel();
        btnAddEnemy = new javax.swing.JButton();
        jSpinnerHealth = new javax.swing.JSpinner();
        jSpinnerAttack = new javax.swing.JSpinner();
        jSpinnerDefence = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jSpinnerLevel = new javax.swing.JSpinner();
        jLabel18 = new javax.swing.JLabel();
        jSpinnerGold = new javax.swing.JSpinner();
        jLabel19 = new javax.swing.JLabel();
        pnlRooms = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstRooms = new javax.swing.JList();
        btnEditRoom = new javax.swing.JButton();
        btnRemoveRoom = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtRoomName = new javax.swing.JTextField();
        btnSaveRoom = new javax.swing.JButton();
        btnN = new javax.swing.JButton();
        btnE = new javax.swing.JButton();
        btnW = new javax.swing.JButton();
        btnS = new javax.swing.JButton();
        lblNumRooms = new javax.swing.JLabel();
        pnlScript = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        lstRooms1 = new javax.swing.JList();
        btnEditRoom1 = new javax.swing.JButton();
        btnRemoveRoom1 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        cobScriptType = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        panel = new javax.swing.JPanel();
        sldSizeY = new javax.swing.JSlider();
        sldSizeX = new javax.swing.JSlider();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlSide.setEnabled(false);

        jLabel1.setText("Nazwa mapy:");

        btnSaveToFile.setText("Zapisz");
        btnSaveToFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveToFileActionPerformed(evt);
            }
        });

        txtFileName.setText("map.mm");

        jLabel6.setText("Nazwa pliku:");

        jButton6.setText("Wczytaj");

        btnNewMap.setText("Nowa Mapa");
        btnNewMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewMapActionPerformed(evt);
            }
        });

        lblMapNumRooms.setText(" ");

        lblMapNumEnemies.setText(" ");

        lblMapNumItems.setText(" ");

        javax.swing.GroupLayout pnlMapLayout = new javax.swing.GroupLayout(pnlMap);
        pnlMap.setLayout(pnlMapLayout);
        pnlMapLayout.setHorizontalGroup(
            pnlMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMapLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtMapName)
                    .addGroup(pnlMapLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtFileName))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMapLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnNewMap))
                    .addGroup(pnlMapLayout.createSequentialGroup()
                        .addGroup(pnlMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(pnlMapLayout.createSequentialGroup()
                                .addComponent(btnSaveToFile, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(lblMapNumRooms, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                                .addComponent(lblMapNumEnemies, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblMapNumItems, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlMapLayout.setVerticalGroup(
            pnlMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMapLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtMapName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnNewMap)
                .addGap(8, 8, 8)
                .addComponent(lblMapNumRooms)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMapNumEnemies)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblMapNumItems)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 232, Short.MAX_VALUE)
                .addGroup(pnlMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(8, 8, 8)
                .addGroup(pnlMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSaveToFile)
                    .addComponent(jButton6))
                .addGap(8, 8, 8))
        );

        pnlSide.addTab("Mapa", pnlMap);

        pnlItem.setBackground(new java.awt.Color(204, 255, 255));

        jLabel4.setText("Nazwa:");

        btnEditItem.setText("Edytuj");
        btnEditItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditItemActionPerformed(evt);
            }
        });

        btnRemoveItem.setText("Usuń");
        btnRemoveItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveItemActionPerformed(evt);
            }
        });

        lstItem.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstItem.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstItemValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(lstItem);

        lblNumItems.setText(" ");

        btnAddItem.setText("Dodaj");
        btnAddItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddItemActionPerformed(evt);
            }
        });

        cobItemParent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cobItemParentActionPerformed(evt);
            }
        });

        jLabel8.setText("Rodzic:");

        jSpinnerItemAttack.setModel(new javax.swing.SpinnerNumberModel());

        jSpinnerItemDefence.setModel(new javax.swing.SpinnerNumberModel());

        jSpinnerItemHealth.setModel(new javax.swing.SpinnerNumberModel());
        jSpinnerItemHealth.setToolTipText("");

        jSpinnerItemExperience.setModel(new javax.swing.SpinnerNumberModel());

        jLabel5.setText("Atak:");

        jLabel13.setText("Obrona:");

        jLabel14.setText("Zdrowie:");

        jLabel15.setText("Doświadczenie:");

        jLabel17.setText("Typ:");

        jComboBoxItemType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "WEAPON", "WEAR", "MISC", "FOOD", "ARTIFACT", "JEWELRY", "GOLD" }));
        jComboBoxItemType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxItemTypeActionPerformed(evt);
            }
        });

        jSpinnerItemValue.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(10)));

        jLabel16.setText("Wartość:");

        javax.swing.GroupLayout pnlItemLayout = new javax.swing.GroupLayout(pnlItem);
        pnlItem.setLayout(pnlItemLayout);
        pnlItemLayout.setHorizontalGroup(
            pnlItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlItemLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblNumItems, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlItemLayout.createSequentialGroup()
                        .addComponent(btnEditItem, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRemoveItem, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlItemLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(pnlItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel16)
                            .addComponent(jLabel5)
                            .addComponent(jLabel14)
                            .addComponent(jLabel15)
                            .addComponent(jLabel13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSpinnerItemValue)
                            .addGroup(pnlItemLayout.createSequentialGroup()
                                .addGroup(pnlItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jSpinnerItemAttack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jSpinnerItemDefence, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jSpinnerItemHealth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jSpinnerItemExperience, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(btnAddItem, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(pnlItemLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(pnlItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel17)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cobItemParent, 0, 127, Short.MAX_VALUE)
                            .addComponent(jComboBoxItemType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
            .addGroup(pnlItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlItemLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(txtItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );
        pnlItemLayout.setVerticalGroup(
            pnlItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlItemLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(pnlItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cobItemParent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(jComboBoxItemType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerItemAttack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerItemDefence, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerItemHealth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerItemExperience, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerItemValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblNumItems)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAddItem)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRemoveItem)
                    .addComponent(btnEditItem))
                .addContainerGap(14, Short.MAX_VALUE))
            .addGroup(pnlItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlItemLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(pnlItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(txtItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(412, Short.MAX_VALUE)))
        );

        pnlSide.addTab("Przedmioty", pnlItem);

        pnlEnemy.setBackground(new java.awt.Color(255, 231, 122));

        lstEnemy.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstEnemy.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstEnemyValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(lstEnemy);

        btnEditEnemy.setText("Edytuj");
        btnEditEnemy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditEnemyActionPerformed(evt);
            }
        });

        btnRemoveEnemy.setText("Usuń");
        btnRemoveEnemy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveEnemyActionPerformed(evt);
            }
        });

        jLabel3.setText("Nazwa:");

        lblNumEnemies.setText("jLabel10");

        btnAddEnemy.setText("Dodaj");
        btnAddEnemy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddEnemyActionPerformed(evt);
            }
        });

        jSpinnerHealth.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));

        jSpinnerAttack.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));

        jSpinnerDefence.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));

        jLabel7.setText("Wytrzymałość:");

        jLabel10.setText("Atak:");

        jLabel11.setText("Obrona:");

        jSpinnerLevel.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));

        jLabel18.setText("Poziom:");

        jSpinnerGold.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(10)));

        jLabel19.setText("Pieniądze:");

        javax.swing.GroupLayout pnlEnemyLayout = new javax.swing.GroupLayout(pnlEnemy);
        pnlEnemy.setLayout(pnlEnemyLayout);
        pnlEnemyLayout.setHorizontalGroup(
            pnlEnemyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEnemyLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEnemyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                    .addGroup(pnlEnemyLayout.createSequentialGroup()
                        .addComponent(btnEditEnemy, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnRemoveEnemy, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE))
                    .addGroup(pnlEnemyLayout.createSequentialGroup()
                        .addGroup(pnlEnemyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel10)
                            .addComponent(jLabel7)
                            .addComponent(jLabel11)
                            .addComponent(jLabel18)
                            .addComponent(jLabel19))
                        .addGap(18, 18, 18)
                        .addGroup(pnlEnemyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSpinnerHealth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSpinnerAttack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSpinnerDefence, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSpinnerLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSpinnerGold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnlEnemyLayout.createSequentialGroup()
                        .addComponent(lblNumEnemies)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAddEnemy)))
                .addContainerGap())
            .addGroup(pnlEnemyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlEnemyLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel3)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(txtEnemyName)
                    .addContainerGap()))
        );
        pnlEnemyLayout.setVerticalGroup(
            pnlEnemyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEnemyLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(pnlEnemyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerHealth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEnemyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerAttack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEnemyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerDefence, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEnemyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEnemyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerGold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(pnlEnemyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddEnemy)
                    .addComponent(lblNumEnemies))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEnemyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditEnemy)
                    .addComponent(btnRemoveEnemy))
                .addContainerGap())
            .addGroup(pnlEnemyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlEnemyLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(pnlEnemyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(txtEnemyName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(412, Short.MAX_VALUE)))
        );

        pnlSide.addTab("Wrogowie", pnlEnemy);

        jScrollPane1.setViewportView(lstRooms);

        btnEditRoom.setText("Edytuj");
        btnEditRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditRoomActionPerformed(evt);
            }
        });

        btnRemoveRoom.setText("Usuń");
        btnRemoveRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveRoomActionPerformed(evt);
            }
        });

        jLabel2.setText("Nazwa pokoju:");

        btnSaveRoom.setText("Zapisz");
        btnSaveRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveRoomActionPerformed(evt);
            }
        });

        btnN.setText("N");
        btnN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNActionPerformed(evt);
            }
        });

        btnE.setText("E");
        btnE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEActionPerformed(evt);
            }
        });

        btnW.setText("W");
        btnW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWActionPerformed(evt);
            }
        });

        btnS.setText("S");
        btnS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSActionPerformed(evt);
            }
        });

        lblNumRooms.setText("jLabel10");

        javax.swing.GroupLayout pnlRoomsLayout = new javax.swing.GroupLayout(pnlRooms);
        pnlRooms.setLayout(pnlRoomsLayout);
        pnlRoomsLayout.setHorizontalGroup(
            pnlRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRoomsLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(btnW)
                .addGap(0, 0, 0)
                .addGroup(pnlRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnS)
                    .addComponent(btnN))
                .addGap(0, 0, 0)
                .addComponent(btnE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pnlRoomsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                    .addGroup(pnlRoomsLayout.createSequentialGroup()
                        .addComponent(btnEditRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnRemoveRoom, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE))
                    .addGroup(pnlRoomsLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtRoomName))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlRoomsLayout.createSequentialGroup()
                        .addComponent(lblNumRooms)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSaveRoom)))
                .addContainerGap())
        );
        pnlRoomsLayout.setVerticalGroup(
            pnlRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlRoomsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtRoomName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlRoomsLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(pnlRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnE)
                            .addComponent(btnW)))
                    .addGroup(pnlRoomsLayout.createSequentialGroup()
                        .addComponent(btnN)
                        .addGap(18, 18, 18)
                        .addComponent(btnS)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                .addGroup(pnlRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSaveRoom, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlRoomsLayout.createSequentialGroup()
                        .addComponent(lblNumRooms)
                        .addGap(18, 18, 18)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditRoom)
                    .addComponent(btnRemoveRoom))
                .addContainerGap())
        );

        pnlSide.addTab("Pokoje", pnlRooms);

        jScrollPane5.setViewportView(lstRooms1);

        btnEditRoom1.setText("Edytuj");
        btnEditRoom1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditRoom1ActionPerformed(evt);
            }
        });

        btnRemoveRoom1.setText("Usuń");
        btnRemoveRoom1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveRoom1ActionPerformed(evt);
            }
        });

        jLabel9.setText("Typ:");

        cobScriptType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Typ 1", "Typ 2", "Typ 3", "Typ 4", "Typ 5", "Typ 6" }));

        jLabel12.setText("Treść:");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane6.setViewportView(jTextArea1);

        jButton1.setText("Dodaj skrypt");

        javax.swing.GroupLayout pnlScriptLayout = new javax.swing.GroupLayout(pnlScript);
        pnlScript.setLayout(pnlScriptLayout);
        pnlScriptLayout.setHorizontalGroup(
            pnlScriptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlScriptLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlScriptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlScriptLayout.createSequentialGroup()
                        .addComponent(btnEditRoom1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnRemoveRoom1, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE))
                    .addGroup(pnlScriptLayout.createSequentialGroup()
                        .addGroup(pnlScriptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlScriptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cobScriptType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane6)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlScriptLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        pnlScriptLayout.setVerticalGroup(
            pnlScriptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlScriptLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlScriptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(cobScriptType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlScriptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(pnlScriptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditRoom1)
                    .addComponent(btnRemoveRoom1))
                .addContainerGap())
        );

        pnlSide.addTab("Skrypt", pnlScript);

        panel.setBackground(new java.awt.Color(220, 240, 240));
        panel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelMouseClicked(evt);
            }
        });
        panel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                panelComponentResized(evt);
            }
        });
        panel.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                panelPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 662, Short.MAX_VALUE)
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        sldSizeY.setMaximum(40);
        sldSizeY.setMinorTickSpacing(1);
        sldSizeY.setPaintTicks(true);
        sldSizeY.setPaintTrack(false);
        sldSizeY.setPreferredSize(new java.awt.Dimension(200, 10));
        sldSizeY.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sldSizeYStateChanged(evt);
            }
        });

        sldSizeX.setMaximum(30);
        sldSizeX.setMinorTickSpacing(1);
        sldSizeX.setOrientation(javax.swing.JSlider.VERTICAL);
        sldSizeX.setPaintTicks(true);
        sldSizeX.setPaintTrack(false);
        sldSizeX.setInverted(true);
        sldSizeX.setPreferredSize(new java.awt.Dimension(25, 200));
        sldSizeX.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sldSizeXStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sldSizeX, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(10, 10, 10))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sldSizeY, javax.swing.GroupLayout.DEFAULT_SIZE, 664, Short.MAX_VALUE)
                        .addGap(8, 8, 8)))
                .addComponent(pnlSide, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlSide)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sldSizeY, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sldSizeX, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNewMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewMapActionPerformed
        rooms = new ArrayList<>();
        enemies = new ArrayList<>();
        itemsInRoom = new ArrayList<>();
        containers = new ArrayList<>();
        map = new Map();
        map.setName(this.txtMapName.getText());
        if (!map.getName().isEmpty()){
            System.out.println("eloelo");
            txtFileName.setText(map.getName()+".mm");
        }
        Cell firstRoom = new Cell();
        firstRoom.setId(idRoom++);
        firstRoom.setName("START");
        firstRoom.setCordX((int)(mapSizeX/2));
        firstRoom.setCordY((int)(mapSizeY/2));
        map.addRoom(firstRoom);
        rooms.add(firstRoom);
        inxRoom=firstRoom.getId();
        activeCell = firstRoom;
        updateRoomsList();
        updateEnemiesList();
        updateContainers();
        updateItems();

        pnlSide.setEnabled(true);
        repaint();
        
    }//GEN-LAST:event_btnNewMapActionPerformed

    private void btnRemoveRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveRoomActionPerformed
        int index = -1;
        index = lstRooms.getSelectedIndex();
        if (index >= 0) {
            Cell removeRoom = rooms.get(index);
            rooms.remove(removeRoom);
            map.removeRoom(removeRoom);
        }
        inxRoom = Integer.MIN_VALUE;
        repaint();
        updateRoomsList();
    }//GEN-LAST:event_btnRemoveRoomActionPerformed

    private void btnEditRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditRoomActionPerformed
        inxRoom = lstRooms.getSelectedIndex();
        if (inxRoom >= 0) {
            Cell editRoom = rooms.get(inxRoom);
            txtRoomName.setText(editRoom.getName());
            activeCell = editRoom;
        }
        repaint();
        updateRoomsList();
    }//GEN-LAST:event_btnEditRoomActionPerformed

    private void btnNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNActionPerformed
        if (inxRoom >= 0) {
            Cell baseRoom = rooms.get(inxRoom);

            if (baseRoom.getCordX() > 0) {
                if (!map.isEmpty(baseRoom.getCordX() - 1, baseRoom.getCordY())) {
                    inxRoom = getIndexOfRoomFromCord(baseRoom.getCordX() - 1, baseRoom.getCordY());
                    activeCell = rooms.get(inxRoom);
                } else {
                    Cell newRoom = new Cell();
                    newRoom.setId(idRoom++);
                    newRoom.setName(txtRoomName.getText());
                    newRoom.setCordX(baseRoom.getCordX() - 1);
                    newRoom.setCordY(baseRoom.getCordY());
                    
                    updateNeighbours(newRoom);
                    map.addRoom(newRoom);
                    rooms.add(newRoom);
                    activeCell = newRoom;
                    inxRoom = rooms.size() - 1;
                }
            }
        }
        txtRoomName.setText(activeCell.getName());
        repaint();
        updateRoomsList();
        updateItems();
        updateContainers();
        updateEnemiesList();
    }//GEN-LAST:event_btnNActionPerformed

    private void btnSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSActionPerformed
        if (inxRoom >= 0) {
            Cell baseRoom = rooms.get(inxRoom);
            if (baseRoom.getCordX() < 30) {
                if (!map.isEmpty(baseRoom.getCordX() + 1, baseRoom.getCordY())) {
                    inxRoom = getIndexOfRoomFromCord(baseRoom.getCordX() + 1, baseRoom.getCordY());
                    activeCell = rooms.get(inxRoom);
                } else {
                    Cell newRoom = new Cell();
                    newRoom.setId(idRoom++);
                    newRoom.setName(txtRoomName.getText());
                    newRoom.setCordX(baseRoom.getCordX() + 1);
                    newRoom.setCordY(baseRoom.getCordY());
                    
                    updateNeighbours(newRoom);
                    map.addRoom(newRoom);
                    rooms.add(newRoom);
                    activeCell = newRoom;
                    inxRoom = rooms.size() - 1;
                }
            }
        }
        txtRoomName.setText(activeCell.getName());
        repaint();
        updateRoomsList();
        updateItems();
        updateContainers();
        updateEnemiesList();
    }//GEN-LAST:event_btnSActionPerformed

    private void btnWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWActionPerformed
        if (inxRoom >= 0) {
            Cell baseRoom = rooms.get(inxRoom);
            if (baseRoom.getCordY() > 0) {
                if (!map.isEmpty(baseRoom.getCordX(), baseRoom.getCordY() - 1)) {
                    inxRoom = getIndexOfRoomFromCord(baseRoom.getCordX(), baseRoom.getCordY() - 1);
                    activeCell = rooms.get(inxRoom);
                } else {
                    Cell newRoom = new Cell();
                    newRoom.setId(idRoom++);
                    newRoom.setName(txtRoomName.getText());
                    newRoom.setCordX(baseRoom.getCordX());
                    newRoom.setCordY(baseRoom.getCordY() - 1);
                    
                    updateNeighbours(newRoom);
                    map.addRoom(newRoom);
                    rooms.add(newRoom);
                    activeCell = newRoom;
                    inxRoom = rooms.size() - 1;
                }
            }
        }
        txtRoomName.setText(activeCell.getName());
        repaint();
        updateRoomsList();
        updateItems();
        updateContainers();
        updateEnemiesList();
    }//GEN-LAST:event_btnWActionPerformed

    private void btnSaveRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveRoomActionPerformed
        if (inxRoom >= 0) {
            Cell saveRoom = rooms.get(inxRoom);
            if (saveRoom != null) {
                saveRoom.setName(txtRoomName.getText());
            }
        }
        updateRoomsList();
        //updateItems();
        updateParentItemCombo();
        updateEnemiesList();
    }//GEN-LAST:event_btnSaveRoomActionPerformed

    private void btnEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEActionPerformed
        if (inxRoom >= 0) {
            Cell baseRoom = rooms.get(inxRoom);
            if (baseRoom.getCordY() < 40) {
                if (!map.isEmpty(baseRoom.getCordX(), baseRoom.getCordY() + 1)) {
                    inxRoom = getIndexOfRoomFromCord(baseRoom.getCordX(), baseRoom.getCordY() + 1);
                    activeCell = rooms.get(inxRoom);
                } else {
                    Cell newRoom = new Cell();
                    newRoom.setId(idRoom++);
                    newRoom.setName(txtRoomName.getText());
                    newRoom.setCordX(baseRoom.getCordX());
                    newRoom.setCordY(baseRoom.getCordY() + 1);
                    
                    updateNeighbours(newRoom);
                    map.addRoom(newRoom);
                    rooms.add(newRoom);
                    activeCell = newRoom;
                    inxRoom = rooms.size() - 1;
                }
            }
            txtRoomName.setText(activeCell.getName());
            repaint();
            updateRoomsList();
            updateItems();
            updateContainers();
            updateEnemiesList();
        }

    }//GEN-LAST:event_btnEActionPerformed

    private void btnAddEnemyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddEnemyActionPerformed
        // int indRoom=cobEnemyParent.getSelectedIndex();
        if (btnAddEnemy.getText() == "Dodaj") {
            NPC newEnemy = new NPC();
            newEnemy.setName(txtEnemyName.getText());
            newEnemy.setId(idEnemy++);
            newEnemy.setHealth((Integer) jSpinnerHealth.getValue());
            newEnemy.setAttack((Integer) jSpinnerAttack.getValue());
            newEnemy.setDefence((Integer) jSpinnerDefence.getValue());
            newEnemy.setLevel((Integer) jSpinnerLevel.getValue());
            newEnemy.setGold((Integer) jSpinnerGold.getValue());
            newEnemy.location = activeCell;

            enemies.add(newEnemy);
            activeCell.addPerson(newEnemy);
            containers.add(newEnemy);
        } else {
            Person editedEnemy = activeCell.people.get(lstEnemy.getSelectedIndex());
            editedEnemy.setName(txtEnemyName.getText());
            editedEnemy.setHealth((Integer) jSpinnerHealth.getValue());
            editedEnemy.setAttack((Integer) jSpinnerAttack.getValue());
            editedEnemy.setDefence((Integer) jSpinnerDefence.getValue());
            editedEnemy.setLevel((Integer) jSpinnerLevel.getValue());
            editedEnemy.setGold((Integer) jSpinnerGold.getValue());
        }
       updateEnemiesList();
       updateContainers();
       repaint();
    }//GEN-LAST:event_btnAddEnemyActionPerformed

    private void btnAddItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddItemActionPerformed
       if (btnAddItem.getText() == "Dodaj") {
        Item newItem=new Item(txtItemName.getText(),Item.itemType.fromInteger(jComboBoxItemType.getSelectedIndex()), (Integer)jSpinnerItemAttack.getValue(), (Integer)jSpinnerItemDefence.getValue(), (Integer)jSpinnerItemHealth.getValue(), (Integer)jSpinnerItemExperience.getValue(), (Integer)jSpinnerItemValue.getValue());
       itemsInRoom.add(newItem);
       containers.get(cobItemParent.getSelectedIndex()).PutItem(newItem);
       itemnumber++;
       } else{
            Item editedItem = itemsInRoom.get(lstItem.getSelectedIndex());
            editedItem.Name=txtItemName.getText();
            editedItem.setType(Item.itemType.fromInteger(jComboBoxItemType.getSelectedIndex()));
            editedItem.setAttackModifier((Integer)jSpinnerItemAttack.getValue());
            editedItem.setDefenceModifier((Integer)jSpinnerItemDefence.getValue());
            editedItem.setHealthModifier((Integer)jSpinnerItemHealth.getValue());
            editedItem.setExperienceModifier((Integer)jSpinnerItemExperience.getValue());
            editedItem.setValue((Integer)jSpinnerItemValue.getValue());
       }
       updateItemsList();
       repaint();
    }//GEN-LAST:event_btnAddItemActionPerformed

    private void btnRemoveItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveItemActionPerformed
        int index = lstItem.getSelectedIndex();
        if (index >= 0) {
            Item toDel = itemsInRoom.get(index);
            containers.get(cobItemParent.getSelectedIndex()).removeItem(toDel);
            itemsInRoom.remove(toDel);
            itemnumber--;
        } 
        repaint();
        updateItemsList();
        btnAddItem.setText("Dodaj");
    }//GEN-LAST:event_btnRemoveItemActionPerformed

    private void btnRemoveEnemyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveEnemyActionPerformed
        int index = lstEnemy.getSelectedIndex();
        if (index >= 0) {
            Person toDel = activeCell.people.get(index);
            activeCell.people.remove(toDel);
            enemies.remove(toDel);
        }
        repaint();
        updateEnemiesList();
        btnAddEnemy.setText("Dodaj");
    }//GEN-LAST:event_btnRemoveEnemyActionPerformed

    private void cobItemParentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cobItemParentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cobItemParentActionPerformed

    private void panelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelMouseClicked
        //System.out.println("eloelo" + evt.getY() + " " + evt.getX());
        if (map !=null) {
            if (!map.isEmpty(evt.getY() / 16, evt.getX() / 16)) {
                inxRoom = getIndexOfRoomFromCord(evt.getY() / 16, evt.getX() / 16);
                activeCell = rooms.get(inxRoom);
            } else {
                Cell newRoom = new Cell();
                newRoom.setId(idRoom++);
                newRoom.setName(txtRoomName.getText());
                newRoom.setCordX(evt.getY() / 16);
                newRoom.setCordY(evt.getX() / 16);
                updateNeighbours(newRoom);
                map.addRoom(newRoom);
                rooms.add(newRoom);
                activeCell = newRoom;
                inxRoom = rooms.size() - 1;
            }
            txtRoomName.setText(activeCell.getName());
            repaint();
            updateRoomsList();
            updateItems();
            updateContainers();
            updateEnemiesList();
        }

    }//GEN-LAST:event_panelMouseClicked

    private void btnSaveToFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveToFileActionPerformed
        JFrame parentFrame = new JFrame();

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Wybierz gdzie zapisać");
        //fileChooser.setName("twojastara");
        fileChooser.setSelectedFile(new File(txtFileName.getText()));
        //fileChooser.getUI().setFileName( name )

        int userSelection = fileChooser.showSaveDialog(parentFrame);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            System.out.println("Save as file: " + fileToSave.getAbsolutePath());
            FileOutputStream fos = null;
            ObjectOutputStream oos = null;
            try {
                fos = new FileOutputStream(fileToSave); //utworzenie strumienia wyjściowego
                oos = new ObjectOutputStream(fos);  //utworzenie obiektu zapisującego do strumienia

                oos.writeObject(toGameWorld()); //serializacja obiektu
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                // zamykamy strumienie w finally
                try {
                    if (oos != null) {
                        oos.close();
                    }
                } catch (IOException e) {
                }
                try {
                    if (fos != null) {
                        fos.close();
                    }
                } catch (IOException e) {
                }
            }
        }
    }//GEN-LAST:event_btnSaveToFileActionPerformed

    private void btnEditRoom1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditRoom1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnEditRoom1ActionPerformed

    private void btnRemoveRoom1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveRoom1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRemoveRoom1ActionPerformed

    private void sldSizeXStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sldSizeXStateChanged
        Dimension dim=this.panel.getSize();
        this.mapSizeX=(int)(dim.height/16*(this.sldSizeX.getValue()/30.0f));
        this.mapSizeY=(int)(dim.width/16*(this.sldSizeY.getValue()/40.0f));
        repaint();
    }//GEN-LAST:event_sldSizeXStateChanged

    private void sldSizeYStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sldSizeYStateChanged
        Dimension dim=this.panel.getSize();
        this.mapSizeX=(int)(dim.height/16*(this.sldSizeX.getValue()/30.0f));
        this.mapSizeY=(int)(dim.width/16*(this.sldSizeY.getValue()/40.0f));
        repaint();
    }//GEN-LAST:event_sldSizeYStateChanged

    private void jComboBoxItemTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxItemTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxItemTypeActionPerformed

    private void btnEditEnemyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditEnemyActionPerformed
       if (lstEnemy.getSelectedIndex()>=0){
       Person editedEnemy= activeCell.getPeople().get(lstEnemy.getSelectedIndex());
       txtEnemyName.setText(editedEnemy.getName());
       jSpinnerHealth.setValue(editedEnemy.getHealth());
       jSpinnerAttack.setValue( editedEnemy.getAttack());
       jSpinnerDefence.setValue(editedEnemy.getDefence());
       jSpinnerLevel.setValue(editedEnemy.getLevel());
       jSpinnerGold.setValue(editedEnemy.getGold());
       btnAddEnemy.setText("Zapisz");
       }
    }//GEN-LAST:event_btnEditEnemyActionPerformed

    private void lstEnemyValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstEnemyValueChanged
        btnAddEnemy.setText("Dodaj");
    }//GEN-LAST:event_lstEnemyValueChanged

    private void panelPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_panelPropertyChange
        
    }//GEN-LAST:event_panelPropertyChange

    private void panelComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_panelComponentResized
       Dimension dim=this.panel.getSize();
        this.mapSizeX=(int)(dim.height/16*(this.sldSizeX.getValue()/30.0f));
        this.mapSizeY=(int)(dim.width/16*(this.sldSizeY.getValue()/40.0f));
    }//GEN-LAST:event_panelComponentResized

    private void btnEditItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditItemActionPerformed
       if (lstItem.getSelectedIndex()>=0){
        Item editedItem= itemsInRoom.get(lstItem.getSelectedIndex());
       txtItemName.setText(editedItem.Name);
       jComboBoxItemType.setSelectedItem(editedItem.getType().toString());
       jSpinnerItemAttack.setValue( editedItem.getAttackModifier());
       jSpinnerItemDefence.setValue(editedItem.getDefenceModifier());
       jSpinnerItemHealth.setValue(editedItem.getHealthModifier());
       jSpinnerItemExperience.setValue(editedItem.getExperienceModifier());
       jSpinnerItemValue.setValue(editedItem.getValue());
       btnAddItem.setText("Zapisz");
       }
    }//GEN-LAST:event_btnEditItemActionPerformed

    private void lstItemValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstItemValueChanged
        btnAddItem.setText("Dodaj");
    }//GEN-LAST:event_lstItemValueChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    public void updateRoomsList() {
        DefaultListModel model = new DefaultListModel();
        lstRooms.setModel(model);
        this.lblNumRooms.setText("Liczba pokoi: " + rooms.size());
        this.lblMapNumRooms.setText("Liczba pokoi: " + rooms.size());
        for (int i = 0; i < rooms.size(); i++) {
            String s = Integer.toString(i)+"#" + rooms.get(i).getLine();
            model.addElement(s);
        }
        updateParentItemCombo();
        //updateParentEnemyCombo();
        //updateParentItemCombo();
    }
    public void updateParentItemCombo(){
        cobItemParent.removeAllItems();
        for(int i=0;i<containers.size();i++){
            cobItemParent.addItem(containers.get(i).getLine());
        }
    }
    //public void updateParentEnemyCombo(){
    //    cobEnemyParent.removeAllItems();
    //    for(int i=0;i<rooms.size();i++){
    //        cobEnemyParent.addItem(rooms.get(i).getLine());
    //    }
    //}
    //public void updateParentItemCombo(){
    //    cobItemParent.removeAllItems();
    //    for(int i=0;i<rooms.size();i++){
    //        cobItemParent.addItem(rooms.get(i).getLine());
    //    }
    //    for(int i=0;i<containers.size();i++){
    //        cobItemParent.addItem(containers.get(i).getLine());
    //    }
        
    //}

    public void updateEnemiesList() {
        DefaultListModel model = new DefaultListModel();
        lstEnemy.setModel(model);
        this.lblNumEnemies.setText("Liczba Osób: " + activeCell.getPeople().size());
        this.lblMapNumEnemies.setText("Liczba Osób: " + enemies.size());
        for (int i = 0; i < activeCell.getPeople().size(); i++) {
            String s = Integer.toString(i)+"#" + activeCell.getPeople().get(i).getLine();
            model.addElement(s);
        }
    }
    
    public void updateContainers() {
        containers.clear();
        containers.add(activeCell);
        containers.addAll(activeCell.getPeople());
        updateParentItemCombo();
    }

    public void updateItems() {
        itemsInRoom.clear();
        for (int i = 0; i < activeCell.getItems().size(); i++) {
            itemsInRoom.add(activeCell.getItems().get(i));
        }
        for (Person person : activeCell.getPeople()){
            for (Item item : person.equipment){
                itemsInRoom.add(item);
            }
        }
        updateItemsList();
        
    }
        public void updateItemsList() {
        DefaultListModel model = new DefaultListModel();
        lstItem.setModel(model);
        for (int i = 0; i < itemsInRoom.size(); i++) {
            String s = Integer.toString(i)+"#" + itemsInRoom.get(i).toString();
            model.addElement(Integer.toString(i) +"#" + itemsInRoom.get(i).toString());
        }
        this.lblNumItems.setText("Liczba przedmiotów: " + itemsInRoom.size());
        this.lblMapNumItems.setText("Liczba przedmiotów: " + itemnumber);
        
    }

    public int getIndexOfRoom(Cell roomToFind) {
        for (int i = 0; i < rooms.size(); i++) {
            if (roomToFind == rooms.get(i)) {
                return i;
            }
        }
        return -1;
    }

    public int getIndexOfRoomFromCord(int x, int y) {
        for (int i = 0; i < rooms.size(); i++) {
            if (x == rooms.get(i).getCordX() && y == rooms.get(i).getCordY()) {
                return i;
            }
        }
        return -1;
    }
    public Cell getRoomFromCord(int x, int y) {
        for (int i = 0; i < rooms.size(); i++) {
            if (x == rooms.get(i).getCordX() && y == rooms.get(i).getCordY()) {
                return rooms.get(i);
            }
        }
        return null;
    }
    public void updateNeighbours(Cell newCell){
        if (!map.isEmpty(newCell.getCordX()-1, newCell.getCordY())){
            Cell northCell = getRoomFromCord(newCell.getCordX()-1, newCell.getCordY());
            newCell.cellNorth = northCell;
            northCell.cellSouth = newCell;
        } else newCell.cellNorth=null;
        if (!map.isEmpty(newCell.getCordX()+1, newCell.getCordY())){
            Cell southCell = getRoomFromCord(newCell.getCordX()+1, newCell.getCordY());
            newCell.cellSouth = southCell;
            southCell.cellNorth = newCell;
        } else newCell.cellSouth=null;
        if (!map.isEmpty(newCell.getCordX(), newCell.getCordY()+1)){
            Cell eastCell = getRoomFromCord(newCell.getCordX(), newCell.getCordY()+1);
            newCell.cellEast = eastCell;
            eastCell.cellWest = newCell;
        } else newCell.cellEast=null;
        if (!map.isEmpty(newCell.getCordX(), newCell.getCordY()-1)){
            Cell westCell = getRoomFromCord(newCell.getCordX(), newCell.getCordY()-1);
            newCell.cellWest = westCell;
            westCell.cellEast = newCell;
        } else newCell.cellWest=null;
    }
    public GameWorld toGameWorld(){
        System.out.println(rooms.size());
        GameWorld swiat = new GameWorld();
        HashMap<Cell, com.mud.Entities.Cell> map = new HashMap<>();
        for (Cell cell : rooms){
            if (!map.containsKey(cell)){
                com.mud.Entities.Cell newCell = new com.mud.Entities.Cell();
                newCell.Name=cell.getName();
                for (Person person : cell.getPeople()){
                    com.mud.Entities.Person newPerson = new com.mud.Entities.NonPlayerCharacter(person.getName(), person.getHealth(), person.getAttack(), person.getDefence(), person.getLevel(), person.getGold());
                    newPerson.setLocation(newCell);
                    for (com.mud.Entities.Item item : person.equipment){
                        newPerson.PutItem(item);
                    }
                }
                for (com.mud.Entities.Item item : cell.getItems()){
                    newCell.PutItem(item);
                }
                map.put(cell, newCell);
            }
        }
        for (Cell cell : rooms){
            com.mud.Entities.Cell newCell = map.get(cell);
            newCell.cellEast = map.get(cell.cellEast);
            newCell.cellWest = map.get(cell.cellWest);
            newCell.cellNorth = map.get(cell.cellNorth);
            newCell.cellSouth = map.get(cell.cellSouth);
        }
        swiat.setStartingCell(map.get(rooms.get(0)));
        return swiat;
    }

    public void paint(Graphics arg0) {
        super.paint(arg0);
        int recSize = 16;
        int startX=53;
        int startY=63;
        
        //rysowanie planszy
        for (int i = 0; i < mapSizeX; i++) {
            for (int j = 0; j < mapSizeY; j++) {
                if (map!=null){
                    arg0.setColor(Color.LIGHT_GRAY);
                }else{
                    arg0.setColor(Color.GRAY);
                }
                arg0.fillRect(startX + recSize * j, startY + recSize * i, recSize - 1, recSize - 1);
                arg0.setColor(Color.DARK_GRAY);
                arg0.drawRect(startX + recSize * j, startY + recSize * i, recSize - 1, recSize - 1);
            }
        }
        //rysowanie pokoi
        if (map != null) {
            int i = 0;
            while (map.getRoom(i) != null) {
                Cell room = map.getRoom(i);
                int x = room.getCordX();
                int y = room.getCordY();
                arg0.setColor(Color.GREEN);
                if (inxRoom == i) {
                    arg0.setColor(Color.RED);
                }
                arg0.fillRect(startX + recSize * y, startY + recSize * x, recSize - 1, recSize - 1);
                arg0.setColor(Color.DARK_GRAY);
                arg0.drawRect(startX + recSize * y, startY + recSize * x, recSize - 1, recSize - 1);
                if(room.getPeople().size()>0){
                    //arg0.setColor(room.getEnemies().get(0).getColor());
                    arg0.setColor(Color.ORANGE);
                    arg0.fillRect(startX + recSize * y+(int)recSize/2, startY + recSize * x+(int)recSize/4, (int)recSize/4, (int)recSize/4);
                }
                if(room.getItems().size()>0){
                    //arg0.setColor(room.getItems().get(0).getColor());
                    arg0.setColor(Color.CYAN);
                    arg0.fillRect(startX + recSize * y+(int)recSize/4, startY + recSize * x+(int)recSize/2, (int)recSize/4, (int)recSize/4);
                }
                i++;
            }
            
        }

    }
    public Map map;
    public ArrayList<Cell> rooms;
    public ArrayList<Person> enemies;
    public int itemnumber = 0;
    public ArrayList<Item> itemsInRoom;
    public ArrayList<ItemContainer> containers;
    public Cell activeCell = null;

    public int inxRoom = -1;

    public int idRoom = 0;
    public int idItem = 0;
    public int idContainer = 0;
    public int idEnemy = 0;
    
    public int mapSizeY=40;
    public int mapSizeX=30;
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddEnemy;
    private javax.swing.JButton btnAddItem;
    private javax.swing.JButton btnE;
    private javax.swing.JButton btnEditEnemy;
    private javax.swing.JButton btnEditItem;
    private javax.swing.JButton btnEditRoom;
    private javax.swing.JButton btnEditRoom1;
    private javax.swing.JButton btnN;
    private javax.swing.JButton btnNewMap;
    private javax.swing.JButton btnRemoveEnemy;
    private javax.swing.JButton btnRemoveItem;
    private javax.swing.JButton btnRemoveRoom;
    private javax.swing.JButton btnRemoveRoom1;
    private javax.swing.JButton btnS;
    private javax.swing.JButton btnSaveRoom;
    private javax.swing.JButton btnSaveToFile;
    private javax.swing.JButton btnW;
    private javax.swing.JComboBox cobItemParent;
    private javax.swing.JComboBox cobScriptType;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton6;
    private javax.swing.JComboBox jComboBoxItemType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSpinner jSpinnerAttack;
    private javax.swing.JSpinner jSpinnerDefence;
    private javax.swing.JSpinner jSpinnerGold;
    private javax.swing.JSpinner jSpinnerHealth;
    private javax.swing.JSpinner jSpinnerItemAttack;
    private javax.swing.JSpinner jSpinnerItemDefence;
    private javax.swing.JSpinner jSpinnerItemExperience;
    private javax.swing.JSpinner jSpinnerItemHealth;
    private javax.swing.JSpinner jSpinnerItemValue;
    private javax.swing.JSpinner jSpinnerLevel;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel lblMapNumEnemies;
    private javax.swing.JLabel lblMapNumItems;
    private javax.swing.JLabel lblMapNumRooms;
    private javax.swing.JLabel lblNumEnemies;
    private javax.swing.JLabel lblNumItems;
    private javax.swing.JLabel lblNumRooms;
    private javax.swing.JList lstEnemy;
    private javax.swing.JList lstItem;
    private javax.swing.JList lstRooms;
    private javax.swing.JList lstRooms1;
    private javax.swing.JPanel panel;
    private javax.swing.JPanel pnlEnemy;
    private javax.swing.JPanel pnlItem;
    private javax.swing.JPanel pnlMap;
    private javax.swing.JPanel pnlRooms;
    private javax.swing.JPanel pnlScript;
    private javax.swing.JTabbedPane pnlSide;
    private javax.swing.JSlider sldSizeX;
    private javax.swing.JSlider sldSizeY;
    private javax.swing.JTextField txtEnemyName;
    private javax.swing.JTextField txtFileName;
    private javax.swing.JTextField txtItemName;
    private javax.swing.JTextField txtMapName;
    private javax.swing.JTextField txtRoomName;
    // End of variables declaration//GEN-END:variables
}
